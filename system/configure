#!

(import (bootscheme 2020))

;; Utilities

(define (find match? lis)
  (and (not (null? lis))
       (if (match? (car lis)) (car lis)
           (find match? (cdr lis)))))

(define (find-value get-value lis)
  (and (not (null? lis))
       (let ((value (get-value (car lis))))
         (or value (find-value get-value (cdr lis))))))

(define (fold combine state lis)
  (let loop ((state state) (lis lis))
    (if (null? lis) state (loop (combine state (car lis)) (cdr lis)))))

(define (filter match? lis)
  (reverse (fold (lambda (newlis elt)
                   (if (match? elt) (cons elt newlis) newlis))
                 '() lis)))

(define (string-index s char)
  (let ((n (string-length s)))
    (let loop ((i 0))
      (cond ((= i n) #f)
            ((char=? char (string-ref s i)) i)
            (else (loop (+ i 1)))))))

(define (string-index-right s char start)
  (let loop ((i (- (string-length s) 1)))
    (cond ((< i start) #f)
          ((char=? char (string-ref s 1)) i)
          (else (loop (- i 1))))))

(define (string-join strings delimiter)
  (if (null? strings) ""
      (let loop ((acc (car strings)) (strings (cdr strings)))
        (if (null? strings) acc
            (loop (string-append acc delimiter (car strings))
                  (cdr strings))))))

(define (string-prefix? fix s)
  (and (>= (string-length s) (string-length fix))
       (string=? fix (substring s 0 (string-length fix)))))

(define (acons key val alist)
  (cons (cons key val) alist))

(define (assoc-set! alist key val)
  (let ((pair (assoc key alist)))
    (if pair
        (set-cdr! pair val)
        (set! alist (cons (cons key val) alist)))
    alist))

(define (assoc-add! alist key . elements)
  (let ((elements (list-copy elements))
        (pair (assoc key alist)))
    (if pair
        (set-cdr! pair (append (cdr pair) elements))
        (set! alist (cons (cons key elements) alist)))
    alist))

(define (writeln x)
  (write x)
  (newline))

(define (disp . xs)
  (for-each display xs)
  (newline))

(define (parse-version-line-from-command version-prefix command . args)
  (let ((line (apply first-line-from-command command args)))
    (and line
         (string-prefix? version-prefix line)
         (substring line
                    (string-length version-prefix)
                    (string-length line)))))

;; Option parsing

(define available-options
  '((("--help" "-h") #f "Show help")
    (("--version" "-V") #f "Show version")

    ;;

    (("--bindir")         directory "")
    (("--datadir")        directory "")
    (("--datarootdir")    directory "")
    (("--docdir")         directory "")
    (("--dvidir")         directory "")
    (("--exec-prefix")    directory "")
    (("--htmldir")        directory "")
    (("--includedir")     directory "")
    (("--infodir")        directory "")
    (("--libdir")         directory "")
    (("--libexecdir")     directory "")
    (("--localedir")      directory "")
    (("--localstatedir")  directory "")
    (("--mandir")         directory "")
    (("--oldincludedir")  directory "")
    (("--pdfdir")         directory "")
    (("--prefix")         directory "")
    (("--psdir")          directory "")
    (("--runstatedir")    directory "")
    (("--sbindir")        directory "")
    (("--sharedstatedir") directory "aa")
    (("--sysconfdir")     directory "")

    ;;

    (("--srcdir")         directory "")))

(define (option-names    option) (list-ref option 0))
(define (option-argument option) (list-ref option 1))
(define (option-helpline option) (list-ref option 2))

(define (option-by-name name)
  (or (and (find (lambda (option) (member name (car option)))
                 available-options))
      (error "No such option" name)))

(define (fatal message)
  (write-string message (current-error-port))
  (newline (current-error-port))
  (exit #f))

(define (version)
  (disp "version")
  (exit #t))

(define (generic-usage which-exit which-port)
  (parameterize ((current-output-port which-port))
    (disp "`configure' configures " progname " " progvers
          " to adapt to many kinds of systems.")
    (disp)
    (disp "Usage: ./configure [OPTION]... [VAR=VALUE]...")
    (disp)
    (disp "To assign environment variables (e.g., CC, CFLAGS...), specify them as")
    (disp "VAR=VALUE.  See below for descriptions of some of the useful variables.")
    (disp)
    (disp "Defaults for the options are specified in brackets.")
    (disp)
    (disp "Options:")
    (let* ((lines (map (lambda (option)
                         (cons (string-join (option-names option) "|")
                               (option-helpline option)))
                       available-options))
           (maxlen (fold max 0 (map string-length (map car lines)))))
      (for-each (lambda (line)
                  (let* ((gaplen (+ 3 (- maxlen (string-length (car line)))))
                         (gap (make-string gaplen #\space)))
                    (disp (car line) gap (cdr line))))
                lines))
    (exit which-exit)))

(define (usage) (generic-usage #f (current-error-port)))
(define (successful-usage) (generic-usage #t (current-output-port)))

(define (how-many-dashes s)
  (let ((n (min 3 (string-length s))))
    (let loop ((i 0))
      (if (and (< i n) (char=? #\- (string-ref s i)))
          (loop (+ i 1))
          i))))

(define (handle state name value)
  (cond ((not name)
         (error "Non-option args not supported" value))
        ((equal? name "-h")
         (acons 'help #t state))
        ((equal? name "-V")
         (acons 'version #t state))
        ((equal? name "--help")
         (acons 'help #t state))
        ((equal? name "--version")
         (acons 'version #t state))
        ((equal? name "--prefix")
         (acons 'prefix value state))
        ((equal? name "--srcdir")
         (acons 'srcdir value state))
        (else
         (error "Unknown option"))))

(define (parse-args args)
  (let loop ((state '()) (args args))
    (if (null? args) state
        (let ((arg (car args)))
          (case (how-many-dashes arg)
            ((0) (loop (handle state #f arg) (cdr args)))
            ((1) (if (= 1 (string-length arg))
                     (loop (handle state #f arg) (cdr args))
                     (let loop-singles ((state state) (args (cdr args)) (i 1))
                       (if (= i (string-length arg))
                           (loop state args)
                           (loop-singles (handle state
                                                 (string #\- (string-ref arg i))
                                                 (car args))
                                         (cdr args)
                                         (+ i 1))))))
            ((2) (if (= 2 (string-length arg))
                     (let loop-non-options ((state state) (args (cdr args)))
                       (if (null? args) state
                           (loop-non-options (handle state #f (car args))
                                             (cdr args))))
                     (let* ((pivot (string-index arg #\=))
                            (name (substring arg 0 (or pivot (string-length arg))))
                            (option (option-by-name name))
                            (argument (option-argument option))
                            (imm-val (and pivot (substring arg
                                                           (+ pivot 1)
                                                           (string-length arg))))
                            (value (if (not argument)
                                       (if imm-val
                                           (error "No argument expected")
                                           #f)
                                       (if imm-val
                                           imm-val
                                           (if (null? (cdr args))
                                               (error "No argument given")
                                               (cadr args))))))
                       (loop (handle state name value)
                             (if (or imm-val (not argument))
                                 (cdr args)
                                 (cddr args))))))
            (else (error "Too many dashes")))))))

;;

(define (write-config-status)
  (with-output-to-file "config.status"
    (lambda ()
      (disp "#! /bin/sh")
      (disp "cd \"$(dirname \"$0\")\"")
      (disp "exec ./configure --foo"))))

(define (write-makefile)
  (with-output-to-file "Makefile"
    (lambda ()
      (let ((phony-targets
             '("all"
               "install"
               "install-html"
               "install-dvi"
               "install-pdf"
               "install-ps"
               "uninstall"
               "install-strip"
               "clean"
               "distclean"
               "mostlyclean"
               "maintainer-clean"
               "TAGS"
               "info"
               "dvi"
               "html"
               "pdf"
               "ps"
               "dist"
               "check"
               "installcheck"
               "installdirs")))
        (disp ".PHONY: " (string-join phony-targets " "))))))

(define (find-srcdir srcdir-option)
  (define (dir-contains-sources? dir)
    #f)
  (or (find dir-contains-sources?
            (if srcdir-option (list srcdir-option) (list "." "..")))
      (error "cannot find the sources")))

(define progname "Gambit")
(define progvers "4.9.3")

(define (get-envars-for-c)
  (list (cons 'cc (get-environment-variable "CC"))
        (cons 'cflags (get-environment-variable "CFLAGS"))
        (cons 'ldflags (get-environment-variable "LDFLAGS"))))

(define (make-check what help thunk)
  (list what help thunk))

(define (check-what  check) (list-ref check 0))
(define (check-help  check) (list-ref check 1))
(define (check-thunk check) (list-ref check 2))

(define (run-check state check)
  (write-string "checking ")
  (write-string (check-what check))
  (write-string "... ")
  (flush-output-port (current-output-port))
  (let ((state ((check-thunk check) state)))
    (newline)
    state))

(define (find-program-and-version result-scheme-name
                                  version-flag prefix commands)
  (lambda (state)
    (let ((p-and-v (find-value (lambda (command)
                                 (let ((version (parse-version-line-from-command
                                                 prefix command version-flag)))
                                   (and version (cons command version))))
                               commands)))
      (set! state (assoc-set! state result-scheme-name p-and-v))
      (write-string (if p-and-v (car p-and-v) "not found"))
      state)))

(define (command-and-versions command versions)
  (cons command
        (map (lambda (version) (string-append command "-" version))
             versions)))

(define (run-c-preprocessor . lines)
  (let ((temp-c-name "configure-temp.c"))
    (with-output-to-file temp-c-name
      (lambda () (for-each write-line lines)))
    (all-output-from-command "cc" "-E" temp-c-name)))

(define (run-c-program . lines)
  (let* ((temp-exe-name "configure-temp")
         (temp-c-name (string-append temp-exe-name ".c")))
    (with-output-to-file temp-c-name
      (lambda () (for-each write-line lines)))
    (and (all-output-from-command "cc" "-o" temp-exe-name temp-c-name)
         (let ((out (first-line-from-command
                     (string-append "./" temp-exe-name))))
           (and out (string->number out))))))

(define (c-define-boolean! state
                           result-scheme-name
                           result-c-name
                           result-c-comment
                           result)
  (write-string (if result "yes" "no"))
  (set! state
    (assoc-set! state result-scheme-name (not (not result))))
  (set! state
    (assoc-add! state 'config-h-lines
                ""
                (string-append "/* " result-c-comment " */")
                (if result
                    (string-append "#define " result-c-name " 1")
                    (string-append "/* #undef " result-c-name " */"))))
  state)

(define (c-define-integer! state
                           result-scheme-name
                           result-c-name
                           result-c-comment
                           result
                           failure-message)
  (write-string (if result (number->string result) failure-message))
  (set! state
    (assoc-set! state result-scheme-name result))
  (set! state
    (assoc-add! state 'config-h-lines
                ""
                (string-append "/* " result-c-comment " */")
                (if result
                    (string-append "#define " result-c-name " "
                                   (number->string result))
                    (string-append "/* #undef " result-c-name " */"))))
  state)

(define (c-slug s)
  (string-map (lambda (c)
                (if (or (char<=? #\0 c #\9)
                        (char<=? #\A c #\Z)
                        (char<=? #\a c #\z))
                    c #\_))
              s))

(define (scheme-slug s)
  (string-map (lambda (c)
                (if (or (char<=? #\0 c #\9)
                        (char<=? #\A c #\Z)
                        (char<=? #\a c #\z)
                        (member c '(#\- #\? #\!)))
                    c #\_))
              s))

(define (make-check-for-c-sizeof type . headers)
  (let* ((what (string-append "size of " type))
         (result-c-comment
          (string-append
           "The size of `" type "', as computed by sizeof."))
         (result-c-name
          (c-slug (string-append "SIZEOF_" (string-upcase type))))
         (result-scheme-name
          (scheme-slug (string-append "sizeof-" type))))
    (make-check
     what
     result-c-comment  ; TODO: Better help.
     (lambda (state)
       (c-define-integer!
        state
        result-scheme-name
        result-c-name
        result-c-comment
        (apply
         run-c-program
         (append
          (map (lambda (header) (string-append "#include <" header ">"))
               (cons "stdio.h" headers))
          (list
           "int main(void) {"
           "  if (printf(\"%d\\n\", (int)(sizeof(" type "))) < 0) return 1;"
           "  return 0;"
           "}")))
        (string-append "cannot determine a size for " type))))))

(define (make-check-for-c-header in-angle-brackets)
  (let* ((what (string-append "for " in-angle-brackets))
         (result-c-comment
          (string-append
           "Define to 1 if you have the"
           " <" in-angle-brackets "> header file."))
         (result-c-name
          (c-slug (string-append "HAVE_" (string-upcase in-angle-brackets))))
         (result-scheme-name
          (scheme-slug (string-append "have-" in-angle-brackets "?"))))
    (make-check
     what
     result-c-comment  ; TODO: Better help.
     (lambda (state)
       (c-define-boolean!
        state
        result-scheme-name
        result-c-name
        result-c-comment
        (run-c-preprocessor
         (string-append "#include <" in-angle-brackets ">")))))))

(define (make-check-for-c-program what
                                  result-scheme-name
                                  result-c-name
                                  result-c-comment
                                  c-program-lines)
  (make-check
   what
   result-c-comment  ; TODO: Better help.
   (lambda (state)
     (c-define-boolean!
      state
      result-scheme-name
      result-c-name
      result-c-comment
      (let ((out (apply run-c-program c-program-lines)))
        (not (not out)))))))

(define (make-check-for-c-ifdef what
                                result-scheme-name
                                result-c-name
                                result-c-comment
                                c-ifdef-name)
  (make-check
   what
   result-c-comment  ; TODO: Better help.
   (lambda (state)
     (c-define-boolean!
      state
      result-scheme-name
      result-c-name
      result-c-comment
      (let* ((key "Found it")
             (out (run-c-preprocessor
                   (string-append "#ifdef " c-ifdef-name)
                   key
                   "#endif")))
        (and out (string-contains out key)))))))

;;;

(define check-for-gnu-make
  (make-check
   "for GNU make"
   "Search all the common names for GNU make"
   (find-program-and-version
    'gnu-make
    "--version"
    "GNU Make "
    '("gmake" "make"))))

(define check-for-gcc
  (make-check
   "for gcc"
   "Search for the GNU Compiler Collection"
   (find-program-and-version
    'gcc
    "--version"
    "gcc-10 "
    (cons "cc" (command-and-versions "gcc" '("10"))))))

(define check-for-guile
  (make-check
   "for Guile"
   "Search for GNU Guile"
   (find-program-and-version
    'guile
    "--version"
    "guile (GNU Guile)"
    (command-and-versions "guile" '("2.2" "2.0" "1.8")))))

(define check-for-c-int128
  (make-check-for-c-ifdef
   "for __int128"
   'have-int128?
   "HAVE_INT128"
   "Define to 1 if you have the __int128 type."
   "__SIZEOF_INT128__"))

(define check-for-c-reallocarray
  (make-check-for-c-program
   "for reallocarray()"
   'have-reallocarray?
   "HAVE_REALLOCARRAY"
   "Define to 1 if you have the reallocarray() function."
   '("#include <stdlib.h>"
     "int main(void) {"
     "  void *p = reallocarray(0, 4, 4);"
     "  return p ? 0 : 1;"
     "}")))

;;;

(define wanted-checks
  (append (list check-for-gnu-make
                check-for-gcc
                check-for-guile
                check-for-c-int128
                check-for-c-reallocarray)
          (map make-check-for-c-header
               '("time.h"
                 "sys/time.h"
                 "sys/types.h"
                 "nonexistent.h"
                 "glob.h"
                 "dlfcn.h"
                 "getopt.h"
                 "sched.h"))
          (map make-check-for-c-sizeof
               '("int"
                 "long"
                 "intptr_t"
                 "off_t"
                 "nonexistent_t"
                 "long long"))))

(define (write-config-h state)
  (let* ((pair (assoc 'config-h-lines state))
         (lines (if pair (cdr pair) '())))
    (with-output-to-file "config.h"
      (lambda () (for-each write-line lines)))))

(define (configure args)
  (let ((state (parse-args args)))
    (cond ((assoc 'help state)
           (successful-usage))
          ((assoc 'version state)
           (version))
          (else
           (let ((state (fold run-check '() wanted-checks)))
             (write-config-h state))
           (write-makefile)
           (write-config-status)))))

(define (make args)
  #f)

(define (which-command)
  (let ((name (command-name)))
    (cond ((equal? name "configure") configure)
          ((equal? name "make") make)
          (else (error "Unknown command" name)))))

(define (main)
  (let ((command (which-command)))
    (command (command-args))))

(main)
